{"version":3,"sources":["components/Info/Progress/Progress.js","components/Info/User/User.js","components/Info/Info.js","components/Navigation/Navigation.js","containers/Answer/Answer.js","components/Answers/Answers.js","containers/Question/Question.js","containers/Results/Results.js","containers/Quiz/Quiz.js","components/QuizSetup/QuizSetup.js","components/NavBar/NavBar.js","components/NotFound/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Progress","props","id","question","current","total","User","currentUser","Info","className","title","Navigation","onClick","previous","next","Answer","type","value","answer","name","submit","Answers","answers","correct_answer","incorrect_answers","i","length","arrayItemForSwitching","targetIndex","Math","floor","random","map","index","key","Question","this","questionInfo","Component","Results","markQuiz","userAnswers","correctAnswers","correctAnswerCounter","answersAndCorrectAnswers","push","currentAnswer","content","answerText","answerCorrect","setAnswerColor","correctAnswerBool","userAnswerArray","results","userResults","obj","style","Quiz","state","currentQuestionIndex","questions","currentPlayerIndex","submitQuestion","answerSelected","answerFound","newAnswer","newAnswerArray","allUserAnswers","setState","Number","quizInfo","numOfPlayers","nextQuestion","previousQuestion","APIRequest","url","category","numOfQuestions","difficulty","fetch","then","res","json","catch","error","checkIfUsersHaveAnsweredAllQuestions","counter","exact","path","skip","skipQuestion","to","QuizSetup","handleChange","htmlFor","onChange","event","target","defaultValue","NavBar","NotFound","App","setQuizState","quizSetupCharacteristic","characteristicValue","quizSetupCopy","quizSetup","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51d95aec.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Progress(props) {\n    return (\n        <div>\n            <h5 id=\"progress\">{props.question.current +1}/{props.question.total}</h5>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function User(props) {\n    return (\n        <div>\n            <p id=\"currentUser\">Player {props.currentUser + 1}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport Progress from './Progress/Progress'\nimport User from './User/User'\nimport './Info.css'\n\nexport default function Info(props) {\n    return (\n        <div className='info'>\n            <User currentUser={props.currentUser}/>\n            <h3 id=\"quizName\">{(props.title)}</h3>\n            <Progress question={{current: props.question.current, total: props.question.total}}/>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Navigation(props) {\n    return (\n        <div>\n            <button id=\"previousBtn\" onClick={props.previous}>Previous Question</button>\n            <button id=\"nextBtn\" onClick={props.next}>Next Question</button>\n        </div>\n    )\n}\n","import React, { Component } from \"react\";\n\nexport default function Answer (props) {\n  \n    return (\n      <div>\n        <input id={props.id} type=\"button\" value={(props.answer)} name=\"answer\" onClick={() => props.submit(props.answer)}/>\n      </div>\n    )\n  }\n","import React from \"react\";\nimport Answer from \"../../containers/Answer/Answer\";\n\nexport default function Answers(props) {\n  let answers = [props.correct_answer, ...props.incorrect_answers];\n\n  for (let i = answers.length - 1; i >= 0; i--) {\n    let arrayItemForSwitching = answers[i];\n    let targetIndex = Math.floor(Math.random() * (answers.length - 1));\n    answers[i] = answers[targetIndex];\n    answers[targetIndex] = arrayItemForSwitching;\n  }\n\n  return (\n    <div>\n      {answers.map((answer, index) => {\n        return <Answer key={index} id={index} answer={answer} submit={props.submit} />;\n      })}\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport Answers from \"../../components/Answers/Answers\";\nexport class Question extends Component {\n  \n  render() {\n    return (\n      <div>\n        <h4 id=\"questionName\">{(this.props.questionInfo.question)}</h4>\n        <Answers\n          correct_answer={this.props.questionInfo.correct_answer}\n          incorrect_answers={this.props.questionInfo.incorrect_answers}\n          submit={this.props.submit}\n        />\n      </div>\n    );\n  }\n}\nexport default Question;\n","import React , { Component } from 'react'\n\nclass Results extends Component{\n\n    markQuiz = (userAnswers, correctAnswers) => {\n        let correctAnswerCounter = 0;\n        let answersAndCorrectAnswers = []; // This will be returned in the 'markedQuizForDisplaying' object which this function returns.\n        // This makes the array the correct length to start with, so that we can inject strings for each question at their relevant indexes.\n        for(let i=0; i < userAnswers.length; i++){\n            answersAndCorrectAnswers.push('placeholder text for displaying results');\n        }\n\n        if(correctAnswers && userAnswers){\n        for (let i = 0; i < userAnswers.length; i++) {\n          let currentAnswer = userAnswers[i];\n          if (\n            currentAnswer.content === correctAnswers[currentAnswer.index]\n          ) {\n              // If the answer is correct, the correct answer counter is increased AND a string is created saying that the user got the question correct.\n            correctAnswerCounter++;\n            answersAndCorrectAnswers[currentAnswer.index] =\n            {answerText : `You answered ${(currentAnswer.content)}, which was correct!`, answerCorrect : true}\n            // Adding a string for each question\n          }\n          else{\n              // If it's wrong, a string is created giving the user the correct answer.\n            answersAndCorrectAnswers[currentAnswer.index] =\n            {answerText : `You answered ${(currentAnswer.content)}, which was wrong! Correct answer: ${(correctAnswers[currentAnswer.index])}`,\n            answerCorrect : false}\n          }\n        }\n        let markedQuizForDisplaying = {correctAnswerCounter: correctAnswerCounter, answersAndCorrectAnswers: answersAndCorrectAnswers} \n        // So that both the pieces of info we need (score and correct answers) can be returned\n        return markedQuizForDisplaying;\n        }\n      };\n\n      setAnswerColor = (correctAnswerBool) => {\n        return({'background-color' : correctAnswerBool ? 'green' : 'red'})\n      }\n\n    render(){\n        let userAnswerArray = []\n        for(let i = 0; i < this.props.userAnswers.length; i++){\n          let results = this.markQuiz(this.props.userAnswers[i], this.props.correctAnswers)\n          userAnswerArray.push(results)\n        }\n\n        return(\n            <div className='resultsContainer'>\n              {userAnswerArray.map((userResults, index) => {\n                return (\n                  <div>\n                  <h1>Player {index + 1}</h1>\n                  <h2 id=\"results\" >This is your score: {userResults.correctAnswerCounter} / {this.props.correctAnswers.length}</h2>\n                    <ol>              \n                      {userResults.answersAndCorrectAnswers.map((obj) => {\n                        return (\n                          <li style={this.setAnswerColor(obj.answerCorrect)}>{obj.answerText}</li>\n                            )\n                            })}\n                            </ol>\n                            </div>\n                )\n              })}\n                \n\n            </div>\n        )\n    }\n\n\n}\n\nexport default Results;","import React, { Component } from \"react\";\nimport Info from \"../../components/Info/Info\";\nimport Navigation from \"../../components/Navigation/Navigation\";\nimport Question from \"../../containers/Question/Question\";\nimport { Route, Switch, Link } from \"react-router-dom\";\nimport Results from \"../../containers/Results/Results\";\n\nclass Quiz extends Component {\n  \n  state = {\n    currentQuestionIndex: 0,\n    questions: [],\n    correctAnswers: [],\n    userAnswers: [],\n    currentPlayerIndex: 0 \n  };\n  componentDidMount() {\n    for(let i = 0; i < this.props.quizInfo.numOfPlayers; i++){\n      this.state.userAnswers.push([])\n    }\n    this.APIRequest(this.props.quizInfo);\n  }\n\n  submitQuestion = answerSelected => {\n    let answerFound = false;\n\n    // make an answer\n    let newAnswer = {\n      content: answerSelected,\n      index: this.state.currentQuestionIndex\n    };\n    let newAnswerArray = this.state.userAnswers[this.state.currentPlayerIndex]; // new answers array\n    //check if index of new answer is in answer array\n    //if not add it to the array\n    //if so update array value\n    if (newAnswerArray.length > 0) {\n      // if there are any answers\n      newAnswerArray.map(answer => {\n        if (answer.index === newAnswer.index) {\n          answer.content = newAnswer.content;\n          answerFound = true;\n        }\n        return answer;\n      });\n    }\n    if (!answerFound) {\n      newAnswerArray.push(newAnswer);\n    }\n    let allUserAnswers = this.state.userAnswers;\n\n    allUserAnswers[this.state.currentPlayerIndex] = newAnswerArray\n    this.setState({ userAnswers: allUserAnswers });\n    if(this.state.currentPlayerIndex === Number(this.props.quizInfo.numOfPlayers) - 1){\n      this.nextQuestion();\n      this.setState({currentPlayerIndex : 0})\n    }\n    else this.setState({currentPlayerIndex: this.state.currentPlayerIndex +1})\n  };\n\n  nextQuestion = () => {\n    if (this.state.currentQuestionIndex < this.state.questions.length - 1) {\n      this.setState({\n        currentQuestionIndex: this.state.currentQuestionIndex + 1\n      });\n    }\n  };\n  previousQuestion = () => {\n    if (this.state.currentQuestionIndex > 0) {\n      this.setState({\n        currentQuestionIndex: this.state.currentQuestionIndex - 1\n      });\n    }\n  };\n\n  APIRequest = quizInfo => {\n    const baseUrl = \"https://opentdb.com/api.php?type=multiple&\";\n    let url =\n      baseUrl +\n      `category=${quizInfo.category}&` +\n      `amount=${quizInfo.numOfQuestions}&` +\n      `difficulty=${quizInfo.difficulty}`\n      ;\n    // console.log(url);\n    // console.log(fetch(url));\n    fetch(url)\n      .then(res => res.json())\n      .then(json => {\n        let correctAnswers = json.results.map(question => {\n          return question.correct_answer;\n        });\n        this.setState({\n          questions: json.results,\n          correctAnswers: correctAnswers\n        });\n      })\n      .catch(error => {\n        //handle error\n      });\n  };\n\n  checkIfUsersHaveAnsweredAllQuestions = () => {\n    let counter = 0;\n    for(let answerArray of this.state.userAnswers){\n      if(answerArray.length === this.state.correctAnswers.length){\n        counter ++;\n      }\n    }\n    if(counter === Number(this.props.quizInfo.numOfPlayers)) {\n      return true;\n    }\n    else return false;\n  }\n\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/quiz\">\n          <div className=\"quizPage\">\n            {this.state.questions.length > 0 ? (\n              <div>\n                <Info\n                  title={this.state.questions[0].category}\n                  currentUser={this.state.currentPlayerIndex}\n                  question={{\n                    current: this.state.currentQuestionIndex,\n                    total: this.props.quizInfo.numOfQuestions\n                  }}\n\n                />\n                <Question\n                  skip={this.skipQuestion}\n                  submit={this.submitQuestion}\n                  questionInfo={\n                    this.state.questions[this.state.currentQuestionIndex]\n                  }\n                />\n                <Navigation\n                  next={this.nextQuestion}\n                  previous={this.previousQuestion}\n                />\n              </div>\n            ) : (\n              <p>Loading...</p>\n            )}\n            {this.checkIfUsersHaveAnsweredAllQuestions()  && <Link to=\"/quiz/results\">\n              You have answered every question! Click here to go to results\n              </Link>}\n          </div>\n        </Route>\n        <Route path=\"/quiz/results\">\n          <Results userAnswers={this.state.userAnswers} correctAnswers={this.state.correctAnswers}/>\n        </Route>\n      </Switch>\n    );\n  }\n}\n\nexport default Quiz;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nclass QuizSetup extends Component {\n  \n  componentDidMount() {\n    //reset default values\n    this.props.handleChange(\"difficulty\",'easy')\n    this.props.handleChange('category','9')\n    this.props.handleChange('numOfQuestions','5')\n    this.props.handleChange('numOfPlayers','1')\n  }\n  render() {\n    return (\n      <div>\n        <label htmlFor=\"difficultyDropdown\">Difficulty</label>\n        <select\n          className=\"difficultyDropDown\"\n          onChange={event =>\n            this.props.handleChange(\"difficulty\", event.target.value)\n          }\n        >\n          <option value=\"easy\" defaultValue=\"selected\">\n            Easy\n          </option>\n          <option value=\"medium\">Medium</option>\n          <option value=\"hard\">Hard</option>\n        </select>\n        <label htmlFor=\"categoryDropdown\">Category</label>\n        <select\n          className=\"categoryDropDown\"\n          onChange={event =>\n            this.props.handleChange(\"category\", event.target.value)\n          }\n        >\n          <option value=\"9\" defaultValue=\"selected\">\n            General Knowledge\n          </option>\n          <option value=\"21\">Sports</option>\n          <option value=\"17\">Science & Nature</option>\n          <option value=\"23\">History</option>\n          <option value=\"28\">Vehicles</option>\n        </select>\n        <label htmlFor=\"numberOfQuestionsDropdown\">Number of questions</label>\n        <select\n          className=\"numberOfQuestionsDropdown\"\n          onChange={event =>\n            this.props.handleChange(\"numOfQuestions\", event.target.value)\n          }\n        >\n          <option value=\"5\" defaultValue=\"selected\">\n            5\n          </option>\n          <option value=\"10\">10</option>\n          <option value=\"15\">15</option>\n        </select>\n        <label htmlFor=\"numberOfPlayersDropdown\">Number of players</label>\n        <select\n          className=\"numberOfPlayersDropdown\"\n          onChange={event =>\n            this.props.handleChange(\"numOfPlayers\", event.target.value)\n          }\n        >\n          <option value=\"1\" defaultValue=\"selected\">\n            1\n          </option>\n          <option value=\"2\">2</option>\n          <option value=\"3\">3</option>\n          <option value=\"4\">4</option>\n        </select>\n        <Link to=\"/quiz\">\n          <button>Start Quiz</button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default QuizSetup;\n","import React from 'react'\nimport {Link} from 'react-router-dom'\nfunction NavBar() {\n    return (\n        <div>\n            <Link to=\"/\" >HOME</Link>\n        </div>\n    )\n}\n\nexport default NavBar;","import React from 'react'\n\nexport default function NotFound() {\n    return (\n        <div>\n            <h2>Page not found: please use the link above to return home</h2>\n        </div>\n    )\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Quiz from \"./containers/Quiz/Quiz\";\nimport QuizSetup from \"./components/QuizSetup/QuizSetup\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport NotFound from \"./components/NotFound/NotFound\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quizSetup: { difficulty: \"easy\", category: \"9\", numOfQuestions: \"5\", numOfPlayers : '1' }\n    };\n    // Setting default quiz values. Eventually this should be built by a componentDidMount function in quizSetup.js\n  }\n\n  setQuizState = (quizSetupCharacteristic, characteristicValue) => {\n    // console.log(\"calling setquiz state with value\" + characteristicValue);\n    let quizSetupCopy = this.state.quizSetup;\n    let characteristicKey = quizSetupCharacteristic;\n    quizSetupCopy[characteristicKey] = characteristicValue;\n    this.setState({ quizSetup: quizSetupCopy });\n  };\n\n  render() {\n    return (\n      <Router className=\"App\">\n        <NavBar />\n        <Switch>\n          <Route exact path=\"/\">\n            <QuizSetup handleChange={this.setQuizState} />\n          </Route>\n          <Route path=\"/quiz\">\n            <Quiz quizInfo={this.state.quizSetup} />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}